from langchain_nvidia_ai_endpoints import ChatNVIDIA
import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from langchain_core.messages import HumanMessage, SystemMessage
from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import START, MessagesState, StateGraph
from dotenv import load_dotenv
from pinecone import Pinecone
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_pinecone import PineconeVectorStore
import re

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants and configuration
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
NVIDIA_API_KEY = os.getenv("NVIDIA_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
INDEX_NAME = "langchain-test-index"
MODEL_NAME = "sentence-transformers/all-mpnet-base-v2"

# Setup workflow for LangChain
workflow = StateGraph(state_schema=MessagesState)

# Initialize Pinecone and Vector Store
Pinecone(api_key=PINECONE_API_KEY)
model_kwargs = {'device': 'cpu'}
encode_kwargs = {'normalize_embeddings': False}
embeddings = HuggingFaceEmbeddings(model_name=MODEL_NAME, model_kwargs=model_kwargs, encode_kwargs=encode_kwargs)
vector_store = PineconeVectorStore(index_name=INDEX_NAME, embedding=embeddings)

def retrieve_from_vector_store(query: str, top_k: int = 2):
    results = vector_store.similarity_search(query, k=top_k)
    return results

# Tools
def get_link(topic: list):
    """Get link for specific actions like getting website, contact, and voice call links

    Args: List of topics. Can add 'website', 'contact' and 'voice_call'.
    """

def get_workouts(filters: dict):
    """Get workouts from a repository of workouts and apply filters where required
    
    Args: Dictionary of filters. Can have keys like 'type', 'intensity', 'efficacy'
    Examples: 
    type could be 'strength', 'hypertrophy' etc...
    intensity can be from a scale of 1 to 5
    efficacy can be from a scale of 1 to 5
    """

llm = ChatNVIDIA(model="meta/llama-3.1-70b-instruct", api_key=NVIDIA_API_KEY).bind_tools([get_link])

def update_prefs(user_prefs: dict):
    # Get intent of user and update accordingly
    return user_prefs

# Define the function that generates responses using LangChain
def call_model(state: MessagesState):
    user_input = state["messages"][-1].content
    print("User Input: ", user_input)
    retrieved_docs = retrieve_from_vector_store(user_input)
    retrieved_context = "\n".join([res.page_content for res in retrieved_docs])
    system_prompt = (
        "You are a women's fitness coach named Mabel. You are very bubbly and talk in short bursts. "
        "You must embody the following:\n" + retrieved_context
    )
    messages = [SystemMessage(content=system_prompt)] + state["messages"]
    response = llm.invoke(messages)
    return (return_message(response))
    
def return_message(response):
    tool_call = response.tool_calls
    if not tool_call:
        return {"messages": response}
    else:
        tool_call = tool_call[0]
        tool_name = tool_call.get("name", "")
        match (tool_name):
            case "get_link":
                tool_args = tool_call.get("args", "")
                topics = tool_args.get("topic", [])
                links = {
                    "website": "https://www.mabelloh.com/",
                    "contact": "https://instagram.com/mabesloh",
                    "voice_call": "https://th.bing.com/th/id/OIP._M8xq8ZqE859erXkR0SD8QHaEo?w=289&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7",
                }
                cur_links = []
                for index, topic in enumerate(topics):
                    link = links.get(topic, "Unavailable")
                    cur_links.append(f"{index + 1}: {link}")
                if (len(topics) > 1):
                    topics_content = f"Here are the links you requested!\n" + "\n".join(cur_links)
                else:
                    topics_content = f"Here is the link!\n {cur_links[0]}"
        response.content = topics_content
        return {"messages": response}


# Add the function to the workflow
workflow.add_node("model", call_model)
workflow.add_edge(START, "model")

# Simple memory management
memory = MemorySaver()
app = workflow.compile(checkpointer=memory)

def escaped_string(text: str) -> str:
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '{', '}', '.', '!', "'"]
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# Telegram Bot Functions
async def start(update: Update, context) -> None:
    user = update.effective_user
    msg = "! I'm a bot powered by AI. Ask me anything related to women's fitness or just chat!"
    final_msg = f"Hi {user.mention_markdown_v2()}{escaped_string(msg)}"
    await update.message.reply_text(
        final_msg,
        parse_mode="MarkdownV2"
    )

async def call_bot(update: Update, context) -> None:
    link = "https://th.bing.com/th/id/OIP._M8xq8ZqE859erXkR0SD8QHaEo?w=289&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7"
    msg = f"Here's the link to get on a call with me right now!\n{link}"
    await update.message.reply_text(
        escaped_string(msg),
        parse_mode="MarkdownV2"
    )

async def handle_message(update: Update, context) -> None:
    prompt = update.message.text
    
    messages = {"messages": [HumanMessage(content=prompt)]}
    ai_msg = app.invoke(messages, config={"configurable": {"thread_id": str(update.message.chat_id)}})

    ai_messages = ai_msg['messages']
    for index in range(len(ai_messages) - 1, -1, -1): # Extract the latest AI message
        cur_message = ai_messages[index]
        if type(cur_message).__name__ == "AIMessage":
            await update.message.reply_text(cur_message.content)
            break

async def error_handler(update: Update, context) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    if update.message:
        await update.message.reply_text("Sorry, an error occurred while processing your request.")

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('call', call_bot))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    application.run_polling(poll_interval=1.0)

if __name__ == '__main__':
    main()
